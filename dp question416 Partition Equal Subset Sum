给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。
0/1背包的一种变体
class Solution {
    public boolean canPartition(int[] nums) {
        int len=nums.length;
        int sum=0;
        for(int i=0;i<len;i++){
            sum+=nums[i];
        }
        //如果总和不能被2整除，则不能得到元素和相等的两个子集
        if(sum%2!=0) return false;
        boolean[][] dp=new boolean[len][sum/2+1];
        for(int i=0;i<sum/2+1;i++){
            if(nums[0]==i){
                dp[0][i]=true;
            }
        }
        for(int i=1;i<len;i++){
            for(int j=0;j<sum/2+1;j++){
                if(nums[i]>j) dp[i][j]=dp[i-1][j];
                else dp[i][j]=dp[i-1][j-nums[i]]||dp[i-1][j];
            }
        }
        return dp[len-1][sum/2];
    }
}
