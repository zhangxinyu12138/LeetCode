1.冒泡排序    时间复杂度: O(N^2) 空间复杂度: O(1) 稳定性：稳定
public static void bubbleSort(int[] arr) {
        for (int end = arr.length-1 ; end > 0; end --) {
            for (int i = 0; i < end ; i++) {   
                if (arr[i] > arr[i + 1]) {
                    swap(arr,i,i+1);
                }
            }
        }
    }

2.选择排序   时间复杂度: O(N^2) 空间复杂度: O(1) 稳定性：不稳定
public static void selectionSort(int[] arr) {

    if (arr == null || arr.length < 2) {
        return;
    }

    for(int i = 0; i < arr.length - 1; i++) {
        int minIndex = i;
        for(int j = i + 1; j < arr.length; j++) {
               minIndex = arr[j] < arr[minIndex] ? j: minIndex;
        }
        swap(arr,i,minIndex);
    }

}

3.插入排序 每次排序前部形成一个暂时的有序序列，扑克牌  最好复杂度：O(N) 数组有序  最差复杂度：O(N^2)  数组逆序 按照最差来算时间复杂度
空间复杂度: O(1)
   public static void insertSort(int[] arr) {
       for (int i=1;i<arr.length;i++){
             for (int j = i - 1; j >= 0 && arr[j] > arr[j+1]; j--){
                    swap(arr,j,j+1);
             }
        }
    }
4.归并排序  时间复杂度：O(N*logN) 空间复杂度: O(N)
public static void mergeSort(int[] arr){
    sortProcess(arr,0,arr.length-1);
}
public static void sortProcess(int[] arr,int L，int R){
    if(L==R) return;
    int mid=(L+R)/2;
    sortProcess(arr,L,mid);  //T(N/2)
    sortProcess(arr,mid+1,R);  //T(N/2)
    merge(arr,L,mid,R);  ////   O(N)
    //T(N)=2T(N/2)+O(N)
}
public static void merge(int[] arr,int L,int mid,int R){
    int[] help = new int[R-L+1];
    int i=0;
    int p1=L;
    int p2=mid+1;
    while(p1 <= mid && p2 <= R){
        help[i++] = arr[p1] < arr[p2] ? arr[p1++] : arr[p2++];
    }
    while(p1 <= mid){
        help[i++] = arr[p1++];
    }
    while(p2 <= R){
        help[i++] = arr[p2++];
    }
    for(i=0;i<help.length;i++){
        arr[L+i] = help[i];
    }
}

5.由归并排序引出小和问题和逆序对问题（归并排序思想的扩展）
    public static int smallSum(int[] arr) {
        if (arr == null || arr.length < 2) {
            return 0;
        }
        return mergeSort(arr, 0, arr.length - 1);
    }

    public static int mergeSort(int[] arr, int l, int r) {
        if (l == r) {
            return 0;
        }
        int mid = (l + r) / 2;
        //mid=l+((r-l)>>1)  防止L+R溢出
        return mergeSort(arr, l, mid)
                + mergeSort(arr, mid + 1, r)
                + merge(arr, l, mid, r);
    }

    public static int merge(int[] arr, int l, int m, int r) {
        int[] help = new int[r - l + 1];
        int i = 0;
        int p1 = l;
        int p2 = m + 1;
        int res = 0;
        while (p1 <= m && p2 <= r) {
            res += arr[p1] < arr[p2] ? (r - p2 + 1) * arr[p1] : 0;
            help[i++] = arr[p1] < arr[p2] ? arr[p1++] : arr[p2++];
        }
        while (p1 <= m) {
            help[i++] = arr[p1++];
        }
        while (p2 <= r) {
            help[i++] = arr[p2++];
        }
        for (i = 0; i < help.length; i++) {
            arr[l + i] = help[i];
        }
        return res;
    }

