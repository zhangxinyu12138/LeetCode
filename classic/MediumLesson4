    //一种信息接收并打印的结构设计
    static class MessageBox {
        private HashMap<Integer, Node> headMap;
        private HashMap<Integer, Node> tailMap;
        private int lastPrint;

        public MessageBox() {
            headMap = new HashMap<>();
            tailMap = new HashMap<>();
            lastPrint = 0;
        }

        public void receive(int num) {
            if (num < 1) {
                return;
            }
            Node cur = new Node(num);
            headMap.put(num, cur);
            tailMap.put(num, cur);
            if (tailMap.containsKey(num - 1)) {
                tailMap.get(num - 1).next = cur;
                headMap.remove(num);
                tailMap.remove(num - 1);
            }
            if (headMap.containsKey(num + 1)) {
                cur.next = headMap.get(num + 1);
                tailMap.remove(num);
                headMap.remove(num + 1);
            }
            if (headMap.containsKey(lastPrint + 1)) {
                print();
            }

        }

        private void print() {
            Node node = headMap.get(++lastPrint);
            headMap.remove(lastPrint);
            while (node != null) {
                System.out.println(node.num + " ");
                node = node.next;
                lastPrint++;
            }
            tailMap.remove(--lastPrint);
            System.out.println();
        }

    }

    static class Node {
        public int num;
        public Node next;

        public Node(int num) {
            this.num = num;
        }
    }


    //怎么找多个数组中最窄的区间且开始的数最小（保证每个数组中至少有一个数在这个区间内）
    static class Node2 {
        public int value;
        public int arrNo;
        public int index;

        public Node2(int v, int arr, int i) {
            value = v;
            arrNo = arr;
            index = i;
        }
    }

    public static int[] minRange(int[][] matrix) {
        TreeSet<Node2> set = new TreeSet<>((o1, o2) -> o1.value - o2.value);

        for (int arrNo = 0; arrNo < matrix.length; arrNo++) {
            set.add(new Node2(matrix[arrNo][0], arrNo, 0));
        }

        boolean isSet = false;
        int begin = 0;
        int end = 0;
        while (true) {
            Node2 minNode = set.first();
            Node2 maxNode = set.last();
            if (!isSet) {
                begin = minNode.value;
                end = maxNode.value;
                isSet = true;
            } else {
                if (end - begin > maxNode.value - minNode.value) {
                    begin = minNode.value;
                    end = maxNode.value;
                }
            }
            set.pollFirst();
            int[] arr = matrix[minNode.arrNo];
            if (arr.length - 1 == minNode.index) {
                break;
            } else {
                set.add(new Node2(arr[minNode.index + 1], minNode.arrNo, minNode.index + 1));
            }
        }

        return new int[]{begin, end};
    }

    //判断一个点是否在矩形内部，矩形的边不一定平行于坐标轴
    public boolean isInside(double x1, double y1, double x2, double y2, double x3, double y3,
                            double x4, double y4, double x, double y) {
        //矩形的边平行于坐标轴
        if (y1 == y2) {
            return isInside(x1, y1, x4, y4, x, y);
        }
        double l = Math.abs(y4 - y3);
        double k = Math.abs(x4 - x3);
        double s = Math.sqrt(k * k + l * l);
        double sin = l / s;
        double cos = k / s;
        double x1R = cos * x1 + sin * y1;
        double y1R = -x1 * sin + y1 * cos;
        double x4R = cos * x4 + sin * y4;
        double y4R = -x4 * sin + y4 * cos;
        double xR = cos * x + sin * y;
        double yR = -x * sin + y * cos;
        return isInside(x1R, y1R, x4R, y4R, xR, yR);

    }

    public boolean isInside(double x1, double y1, double x4, double y4, double x, double y) {
        if (x <= x1) {
            return false;
        }
        if (x >= x4) {
            return false;
        }
        if (y >= y1) {
            return false;
        }
        if (y <= y4) {
            return false;
        }
        return true;
    }

    //判断一个点是否在三角形内部
    //1.海伦公式求面积（会有精度耗损）,不建议使用
    //2.向量叉乘判断一个点在有向边的左侧还是右侧，拿正负号去判断
    public double crossProduct(double x1, double y1, double x2, double y2) {
        return x1 * y2 - x2 * y1;
    }

    public boolean isInside2(double x1, double y1, double x2, double y2, double x3, double y3, double x, double y) {
        if (crossProduct(x3 - x1, y3 - y1, x2 - x1, y2 - y1) >= 0) {
            double tmpx = x2;
            double tmpy = y2;
            x2 = x3;
            y2 = y3;
            x3 = tmpx;
            y3 = tmpy;
        }
        if (crossProduct(x2 - x1, y2 - y1, x - x1, y - y1) < 0) {
            return false;
        }
        if (crossProduct(x3 - x2, y3 - y2, x - x2, y - y2) < 0) {
            return false;
        }
        if (crossProduct(x1 - x3, y1 - y3, x - x3, y - y3) < 0) {
            return false;
        }
        return true;
    }

    //找到数组中未出现的最小正整数
    public int missNum(int[] arr) {
        int l = 0;
        int r = arr.length;
        while (l < r) {
            if (arr[l] == l + 1) {
                l++;
            } else if (arr[l] <= l || arr[l] > r || arr[arr[l] - 1] == arr[l]) {
                arr[l] = arr[--r];
            } else {
                swap(arr, l, arr[l] - 1);
            }
        }
        return l + 1;
    }

    public void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
