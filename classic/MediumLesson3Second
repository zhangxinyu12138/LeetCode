   //利用kmp判断t1树中是否有与t2树拓扑完全相同的子树
    class Node {
        public int value;
        public Node left;
        public Node right;

        public Node(int data) {
            this.value = data;
        }

    }

    public boolean isSubtree(Node t1, Node t2) {
        String t1Str = serialByPre(t1);
        String t2Str = serialByPre(t2);
        return getIndexOf(t1Str, t2Str) != -1;
    }

    public String serialByPre(Node head) {
        if (head == null) {
            return "!#";
        }
        String res = "!" + head.value;
        res += serialByPre(head.left);
        res += serialByPre(head.right);
        return res;
    }

    public int getIndexOf(String s, String m) {
        if (s == null || m == null || m.length() < 1 || s.length() < m.length()) {
            return -1;
        }
        char[] ss = s.toCharArray();
        char[] ms = m.toCharArray();
        int si = 0, mi = 0;
        int[] next = getNextArray(ms);
        while (si < ss.length && mi < ms.length) {
            if (ss[si] == ms[mi]) {
                si++;
                mi++;
            } else if (next[mi] == -1) {
                si++;
            } else {
                mi = next[mi];
            }
        }
        return mi == ms.length ? si - mi : -1;
    }

    public int[] getNextArray(char[] ms) {
        if (ms.length == 1) {
            return new int[]{-1};
        }
        int[] next = new int[ms.length];
        next[0] = -1;
        next[1] = 0;
        int pos = 2;
        int cn = 0;
        while (pos < next.length) {
            if (ms[pos - 1] == ms[cn]) {
                next[pos++] = ++cn;
            } else if (cn > 0) {
                cn = next[cn];
            } else {
                next[pos++] = 0;
            }
        }
        return next;
    }

    //还原压缩字符串
    public static String decompress(String decompressStr) {
        char[] chs = decompressStr.toCharArray();
        return process(chs, 0).str;
    }

    public static class ReturnData {
        public String str;
        public int end;

        public ReturnData(String str, int nextIndex) {
            this.str = str;
            this.end = nextIndex;
        }
    }

    public static ReturnData process(char[] str, int index) {
        StringBuilder res = new StringBuilder();
        int times = 0;
        while (index < str.length && str[index] != '}') {
            if (str[index] == '{') {
                ReturnData returnData = process(str, index + 1);
                res.append(getTimesString(times, returnData.str));
                times = 0;
                index = returnData.end + 1;
            } else {
                if (str[index] >= '0' && str[index] <= '9') {
                    times = times * 10 + str[index] - '0';
                }
                if (str[index] >= 'a' && str[index] <= 'z') {
                    res.append(str[index]);
                }
                index++;
            }
        }
        return new ReturnData(res.toString(), index);
    }

    public static String getTimesString(int times, String base) {
        StringBuilder res = new StringBuilder();
        for (int i = 0; i < times; i++) {
            res.append(base);
        }
        return res.toString();
    }

    //是否完美拼出矩形：两个标准：1.面积相同 2.除大矩形四个顶点只出现1次，其余顶点均出现偶数次。
    public boolean isRectangleCover(int[][] matrix) {
        if (matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }
        int mostLeft = Integer.MAX_VALUE;
        int mostRight = Integer.MIN_VALUE;
        int mostDown = Integer.MAX_VALUE;
        int mostUp = Integer.MIN_VALUE;
        HashSet<String> set = new HashSet<>();
        int area = 0;
        for (int[] rect : matrix) {
            mostLeft = Math.min(rect[0], mostLeft);
            mostDown = Math.min(rect[1], mostDown);
            mostRight = Math.max(rect[2], mostRight);
            mostUp = Math.max(rect[3], mostUp);
            area += (rect[2] - rect[0]) * (rect[3] - rect[1]);
            String leftDown = rect[0] + "_" + rect[1];
            String leftUp = rect[0] + "_" + rect[3];
            String rightDown = rect[2] + "_" + rect[1];
            String rightUp = rect[2] + "_" + rect[3];
            if (!set.add(leftDown)) {
                set.remove(leftDown);
            }
            if (!set.add(leftUp)) {
                set.remove(leftUp);
            }
            if (!set.add(rightUp)) {
                set.remove(rightUp);
            }
            if (!set.add(rightDown)) {
                set.remove(rightDown);
            }
        }
        if(!set.contains(mostLeft+"_"+mostDown)||!set.contains(mostLeft+"_"+mostUp)||
        !set.contains(mostRight+"_"+mostDown)||!set.contains(mostRight+"_"+mostUp)||set.size()!=4){
            return false;
        }
        return area==(mostRight-mostLeft)*(mostUp-mostDown);
    }

    //K个链表合并
    //小顶堆遍历
    public ListNode mergeKLists(ListNode[] lists){
        PriorityQueue<ListNode> queue=new PriorityQueue<>((a,b)->a.val-b.val);
        for(int i=0;i<lists.length;i++){
            if(lists[i]!=null){
                queue.add(lists[i]);
            }
        }
        if(queue.isEmpty()){
            return null;
        }
        ListNode temp=new ListNode(queue.peek().val);
        ListNode head=temp;
        while(!queue.isEmpty()){
            ListNode p=queue.poll();
            temp.next=p;
            temp=temp.next;
            if(p.next!=null){
                queue.offer(p.next);
            }
        }
        return head.next;
    }

    public class ListNode {
         int val;
         ListNode next;
         ListNode(int x) { val = x; }
    }

    //不重复打印排序数组中相加和为给定值的所有二元组和三元组
    public void printUniquePair(int[] arr,int k){
        if(arr==null||arr.length<2){
            return;
        }
        int left=0;
        int right=arr.length-1;
        while(left<right){
            if(arr[left]+arr[right]<k){
                left++;
            }else if(arr[left]+arr[right]>k){
                right--;
            }else{
                if(left==0||arr[left]!=arr[left-1]){
                    System.out.println(arr[left]+","+arr[right]);
                }
                left++;
                right--;
            }
        }
    }

    public void printUniqueTriad(int[] arr,int k){
        if(arr==null||arr.length<2){
            return;
        }
        for(int i=0;i<arr.length-2;i++){
            if(i==0||arr[i]!=arr[i-1]){
                printRest(arr,i,i+1,arr.length-1,k-arr[i]);
            }
        }
    }

    public void printRest(int[] arr,int f,int l,int r,int k){
        while(l<r){
            if(arr[l]+arr[r]<k){
                l++;
            }else if(arr[l]+arr[r]>k){
                r--;
            }else{
                if(l==f+1||arr[l]!=arr[l-1]){
                    System.out.println(arr[f]+","+arr[l]+","+arr[r]);
                }
                l++;
                r--;
            }
        }
    }
