1.LRU. 双端队列+哈希表
public class LRUCache<K, V> {
    private HashMap<K, Node<K,V>> keyNodeMap;
    private NodeDoubleLinkedList<K,V> nodeList;
    private int capacity;

    public LRUCache(int capacity) {
        if (capacity < 1) {
            throw new RuntimeException("should be more than 0.");
        }
        this.keyNodeMap = new HashMap<>();
        this.nodeList = new NodeDoubleLinkedList<>();
        this.capacity = capacity;
    }

    public V get(K key) {
        if (this.keyNodeMap.containsKey(key)) {
            Node<K,V> res = this.keyNodeMap.get(key);
            this.nodeList.moveNodeToTail(res);
            return res.value;
        }
        return null;
    }

    public void set(K key, V value) {
        if (this.keyNodeMap.containsKey(key)) {
            Node<K,V> node = this.keyNodeMap.get(key);
            node.value = value;
            this.nodeList.moveNodeToTail(node);
        } else {
            Node<K,V> newNode = new Node<>(key,value);
            this.keyNodeMap.put(key, newNode);
            this.nodeList.addNode(newNode);
            if (this.keyNodeMap.size() == this.capacity + 1) {
                this.removeMostUnusedCache();
            }
        }

    }

    private void removeMostUnusedCache() {
        Node<K,V> removeNode = this.nodeList.removeHead();
        this.keyNodeMap.remove(removeNode.key);
    }

}

class NodeDoubleLinkedList<K,V> {
    private Node<K,V> head;
    private Node<K,V> tail;

    public NodeDoubleLinkedList() {
        this.head = null;
        this.tail = null;
    }

    //node为空，双向链表为空，双向链表不为空
    public void addNode(Node<K,V> newNode) {
        if (newNode == null) {
            return;
        }
        if (this.head == null) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            this.tail.next = newNode;
            newNode.last = this.tail;
            this.tail = newNode;
        }
    }

    //移动到尾部的点有三种情况，在尾部，在头部，在中间
    public void moveNodeToTail(Node<K,V> node) {
        if (this.tail == node) {
            return;
        }
        //先从链表中把节点摘下来
        if (this.head == node) {
            this.head = node.next;
            this.head.last = null;
        } else {
            node.last.next = node.next;
            node.next.last = node.last;
        }
        //插入双向链表尾部
        node.last = this.tail;
        node.next = null;
        this.tail.next = node;
        this.tail = node;
    }

    public Node<K,V> removeHead() {
        if (this.head == null) {
            return null;
        }
        Node<K,V> res = this.head;
        if (this.head == this.tail) {
            this.head = null;
            this.tail = null;
        } else {
            this.head = res.next;
            res.next = null;
            this.head.last = null;
        }
        return res;
    }

}

class Node<K,V> {
    public K key;
    public V value;
    public Node<K,V> last;
    public Node<K,V> next;

    public Node(K key,V value) {
        this.value = value;
        this.key=key;
    }
}
2.LFU 操作次数一样的key，都放在一个双向链表里（桶）。对于不同的操作次数，分别设置桶，桶和桶之间也看作是一个双向链表
实现代码时，需要维系桶之间、节点之间始终是双向链表这个关系。删除时删除最左边的桶的尾节点。
public class LFUCache {
    private int capacity;
    private int size;
    //表示key由哪个节点代表
    private HashMap<Integer, Node2> records;
    //表示节点在哪个桶里
    private HashMap<Node2, NodeList> heads;
    //整个结构中最左的桶
    private NodeList headList;

    public LFUCache(int K) {
        this.capacity = K;
        this.size = 0;
        this.records = new HashMap<>();
        this.heads = new HashMap<>();
        headList = null;
    }

    //刚刚减少了一个节点的桶是否需要删除
    private boolean modifyHeadList(NodeList removeNodeList) {
        if (removeNodeList.isEmpty()) {
            if (headList == removeNodeList) {
                headList = removeNodeList.next;
                if (headList != null) {
                    headList.last = null;
                }
            } else {
                removeNodeList.last.next = removeNodeList.next;
                if (removeNodeList.next != null) {
                    removeNodeList.next.last = removeNodeList.last;
                }
            }
            return true;
        }
        return false;
    }

    private void move(Node2 node, NodeList oldNodeList) {
        oldNodeList.deleteNode(node);
        NodeList preList = modifyHeadList(oldNodeList) ? oldNodeList.last : oldNodeList;
        NodeList nextList = oldNodeList.next;
        //如果次数+1的桶不存在并且原来的桶为尾部节点，则需要新建桶
        if (nextList == null) {
            NodeList newList = new NodeList(node);
            if (preList != null) {
                preList.next = nextList;
            }
            newList.last = preList;
            if (headList == null) {
                headList = newList;
            }
            heads.put(node, newList);
        } else {
            //次数+1的桶存在
            if (nextList.head.times.equals(node.times)) {
                nextList.addNodeFromHead(node);
                heads.put(node, nextList);
            } else {
                //次数+1的桶不存在并且原来的桶不为尾部节点，则需要新建桶并且考虑与后面桶的连接
                NodeList newList = new NodeList(node);
                if (preList != null) {
                    preList.next = nextList;
                }
                newList.last = preList;
                newList.next = nextList;
                nextList.last = newList;
                if (headList == nextList) {
                    headList = newList;
                }
                heads.put(node, newList);
            }
        }
    }
    
    public void set(int key,int value){
        if(records.containsKey(key)){
            Node2 node=records.get(key);
            node.value=value;
            node.times++;
            NodeList curNodeList=heads.get(node);
            move(node,curNodeList);
        }else{
            //容量达到阈值，需要从头部桶删除一个节点
            if(size==capacity){
                //从最左边桶的尾部删除节点
                Node2 node=headList.tail;
                headList.deleteNode(node);
                modifyHeadList(headList);
                records.remove(node.key);
                heads.remove(node);
                size--;
            }
            Node2 node=new Node2(key,value,1);
            //头部桶为空，此时桶链表中没有桶
            if(headList==null){
                headList=new NodeList(node);
            }else{
                if(headList.head.times.equals(node.times)){
                    headList.addNodeFromHead(node);
                }else{
                    NodeList newList=new NodeList(node);
                    newList.next=headList;
                    headList.last=newList;
                    headList=newList;
                }
            }
            records.put(key,node);
            heads.put(node,headList);
            size++;
        }
    }
    
    public Integer get(int key){
        if(!records.containsKey(key)){
            return null;
        }
        Node2 node=records.get(key);
        node.times++;
        NodeList curNodeList=heads.get(node);
        move(node,curNodeList);
        return node.value;
    }
}

//节点结构
class Node2 {
    public Integer key;
    public Integer value;
    public Integer times;
    public Node2 up;
    public Node2 down;

    public Node2(Integer key, Integer value, Integer times) {
        this.key = key;
        this.value = value;
        this.times = times;
    }
}

//桶结构
class NodeList {
    public Node2 head;
    public Node2 tail;
    public NodeList last;
    public NodeList next;

    public NodeList(Node2 node) {
        head = node;
        tail = node;
    }

    //新的节点放在顶端变成新的头部
    public void addNodeFromHead(Node2 newHead) {
        newHead.down = head;
        head.up = newHead;
        head = newHead;
    }

    public boolean isEmpty() {
        return head == null;
    }

    public void deleteNode(Node2 node) {
        if (head == tail) {
            head = null;
            tail = null;
        } else {
            if (node == head) {
                head = node.down;
                head.up = null;
            } else if (node == tail) {
                tail = node.up;
                tail.down = null;
            } else {
                node.up.down = node.down;
                node.down.up = node.up;
            }
        }
        node.up = null;
        node.down = null;
    }
}

