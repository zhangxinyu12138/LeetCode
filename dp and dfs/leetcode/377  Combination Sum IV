  1.377: Given an integer array with all positive numbers and no duplicates, 
  find the number of possible combinations that add up to a positive integer target.
  nums = [1, 2, 3]
  target = 4

The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)

Note that different sequences are counted as different combinations.

Therefore the output is 7.



  public int combinationSum4(int[] nums, int target) {
        if(nums==null||nums.length==0||target<=0)
            return 0;
        int[] dp=new int[target+1];
        dp[0]=1;
        for(int i=1;i<=target;i++){
            for(int j=0;j<nums.length;j++){
                if(i>=nums[j]) dp[i]+=dp[i-nums[j]];
            }
        }
        return dp[target];
    }
    
  2.39:  Given a set of candidate numbers (candidates) (without duplicates) and a target number (target),
  find all unique combinations in candidates where the candidate numbers sums to target.
  The same repeated number may be chosen from candidates unlimited number of times.
   Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
多重背包问题。
   
   public List<List<Integer>> combinationSum(int[] candidates, int target) {
        int len=candidates.length;
        List<List<Integer>> res=new ArrayList<>();
        List<Integer> list=new ArrayList<>();
        if(len==0) return res;
        Arrays.sort(candidates);
        combinationSumHelp(res,list,candidates,target,0);
        return res;
    }
    private boolean combinationSumHelp(List<List<Integer>> res,List<Integer> list,int[] candidates,int target,int start){
        if(target<0) return false;
        else if(target==0){
            List<Integer> temp=new ArrayList<>(list);
            res.add(temp);
            return false;
        }else{
            for(int i=start;i<candidates.length;i++){
                list.add(candidates[i]);
                boolean flag=combinationSumHelp(res,list,candidates,target-candidates[i],i);
                list.remove(list.size()-1);
                if(!flag) break;
            }
        }
        return true;
    }
