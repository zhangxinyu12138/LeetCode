class Solution {
    public int findUnsortedSubarray(int[] nums) {
       /* int res = nums.length;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i; j <= nums.length; j++) {
                int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE, prev = Integer.MIN_VALUE;
                for (int k = i; k < j; k++) {
                    min = Math.min(min, nums[k]);
                    max = Math.max(max, nums[k]);
                }
                if ((i > 0 && nums[i - 1] > min) || (j < nums.length && nums[j] < max))
                    continue;
                int k = 0;
                while (k < i && prev <= nums[k]) {
                    prev = nums[k];
                    k++;
                }
                 if (k != i)
                    continue;
                k = j;
                while (k < nums.length && prev <= nums[k]) {
                    prev = nums[k];
                    k++;
                }
                if (k == nums.length) {
                    res = Math.min(res, j - i);

                }
            }
        }
        return res;*/
        //selectionSort 
        /*int l = nums.length, r = 0;
        for (int i = 0; i < nums.length - 1; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[j] < nums[i]) {
                    r = Math.max(r, j);
                    l = Math.min(l, i);
                }
            }
        }
        return r - l < 0 ? 0 : r - l + 1;*/
        /*Stack<Integer> stack=new Stack<Integer>();
        int l=nums.length,r=0;
        for(int i=0;i<nums.length;i++){
            while(!stack.isEmpty()&&nums[stack.peek()]>nums[i])
                l=Math.min(l,stack.pop());
            stack.push(i);
        }
        stack.clear();
        for(int i=nums.length-1;i>=0;i--){
            while(!stack.isEmpty()&&nums[stack.peek()]<nums[i]){
                r=Math.max(r,stack.pop());
            }
            stack.push(i);
        }
        return r-l>0?r-l+1:0;*/
        int min=Integer.MAX_VALUE,max=Integer.MIN_VALUE;
        boolean flag=false;
        for(int i=1;i<nums.length;i++){
            if(nums[i]<nums[i-1])
                flag=true;
            if(flag)
                min=Math.min(min,nums[i]);
        }
        flag=false;
        for(int i=nums.length-2;i>=0;i--){
            if(nums[i]>nums[i+1])
                flag=true;
            if(flag)
                max=Math.max(max,nums[i]);
        }
        int l,r;
        for(l=0;l<nums.length;l++){
            if(min<nums[l]){
                break;
            }
        }
        for(r=nums.length-1;r>=0;r--){
            if(max>nums[r]){
                break;
            }
        }
        return r-l<0?0:r-l+1;
    }
}
