1.华为一面笔试题

    public static boolean splitWords(String s, String[] wordArray) {
        HashSet<String> wordSet = new HashSet<>();
        for (String word : wordArray) {
            wordSet.add(word);
        }
        return dfs(s, wordSet, 0);
    }

    public static boolean dfs(String s, HashSet wordSet, int index) {
        if (index == s.length()) {
            return true;
        }
        //面试中错误解法
        /*for (int i = index; i < s.length(); i++) {
            for (int j = i + 1; j < s.length(); j++) {
                if (wordSet.contains(s.substring(i,j))){
                    dfs(s,wordSet,j);
                }
            }
        }*/
        //正确解法
        for (int end = index + 1; end <= s.length(); end++) {
            if (wordSet.contains(s.substring(index, end)) && dfs(s, wordSet, end)) {
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        String s = "huaweismobile";
        String[] wordArray = new String[]{"huawei", "mobile", "huaweis"};
        boolean res = splitWords(s, wordArray);
        String s2 = "catsanddog";
        HashSet<String> wordArray2 = new HashSet<>();
        wordArray2.add("cat");
        wordArray2.add("cats");
        wordArray2.add("and");
        wordArray2.add("sand");
        wordArray2.add("dog");
        List<String> res2 = wordBreak(s2, wordArray2);
        System.out.println(res);
        for(String s3:res2){
            System.out.println(s3);
        }
    }

    //dp做法判断能否根据字典划分
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> wordDictSet = new HashSet(wordDict);
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && wordDictSet.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }


    //dp求出所有划分结果
    public static List<String> wordBreak(String s, Set<String> wordDict) {
        LinkedList<String>[] dp = new LinkedList[s.length() + 1];
        LinkedList<String> initial = new LinkedList<>();
        initial.add("");
        dp[0] = initial;
        for (int i = 1; i <= s.length(); i++) {
            LinkedList<String> list = new LinkedList<>();
            for (int j = 0; j < i; j++) {
                if (dp[j].size() > 0 && wordDict.contains(s.substring(j, i))) {
                    for (String l : dp[j]) {
                        list.add(l + (l.equals("") ? "" : " ") + s.substring(j, i));
                    }
                }
            }
            dp[i] = list;
        }
        return dp[s.length()];
    }

    
    //暴力搜索划分结果
    public List<String> word_Break(String s, Set<String> wordDict, int start) {
        LinkedList<String> res = new LinkedList<>();
        if (start == s.length()) {
            res.add("");
        }
        for (int end = start + 1; end <= s.length(); end++) {
            if (wordDict.contains(s.substring(start, end))) {
                List<String> list = word_Break(s, wordDict, end);
                for (String l : list) {
                    res.add(s.substring(start, end) + (l.equals("") ? "" : " ") + l);
                }
            }
        }
        return res;
    }
