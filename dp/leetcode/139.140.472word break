1.华为一面笔试题
Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]

第一题中等难度，问是否可以将s划分为wordDict中的单词，单词可以重复使用
第二题困难，要求将划分的所有可能性输出，且每种可能性是一个字符串，说明找到前缀字符串划分的情况下，还要拼接上后续相等的字符串。

    //自己写的dfs，也算是暴力递归了，递归过程有些问题，不过终止条件写对了，继续努力
    public static boolean splitWords(String s, String[] wordArray) {
        HashSet<String> wordSet = new HashSet<>();
        for (String word : wordArray) {
            wordSet.add(word);
        }
        return dfs(s, wordSet, 0);
    }

    public static boolean dfs(String s, HashSet wordSet, int index) {
        if (index == s.length()) {
            return true;
        }
        //面试中错误解法
        /*for (int i = index; i < s.length(); i++) {
            for (int j = i + 1; j < s.length(); j++) {
                if (wordSet.contains(s.substring(i,j))){
                    dfs(s,wordSet,j);
                }
            }
        }*/
        //正确解法
        for (int end = index + 1; end <= s.length(); end++) {
            if (wordSet.contains(s.substring(index, end)) && dfs(s, wordSet, end)) {
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        String s = "huaweismobile";
        String[] wordArray = new String[]{"huawei", "mobile", "huaweis"};
        boolean res = splitWords(s, wordArray);
        String s2 = "catsanddog";
        HashSet<String> wordArray2 = new HashSet<>();
        wordArray2.add("cat");
        wordArray2.add("cats");
        wordArray2.add("and");
        wordArray2.add("sand");
        wordArray2.add("dog");
        List<String> res2 = wordBreak(s2, wordArray2);
        System.out.println(res);
        for(String s3:res2){
            System.out.println(s3);
        }
    }

    //dp做法判断能否根据字典划分
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> wordDictSet = new HashSet(wordDict);
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && wordDictSet.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }


    //dp求出所有划分结果 O(n的3次方）
    public static List<String> wordBreak(String s, Set<String> wordDict) {
        LinkedList<String>[] dp = new LinkedList[s.length() + 1];
        LinkedList<String> initial = new LinkedList<>();
        initial.add("");
        dp[0] = initial;
        for (int i = 1; i <= s.length(); i++) {
            LinkedList<String> list = new LinkedList<>();
            for (int j = 0; j < i; j++) {
                if (dp[j].size() > 0 && wordDict.contains(s.substring(j, i))) {
                    for (String l : dp[j]) {
                        list.add(l + (l.equals("") ? "" : " ") + s.substring(j, i));
                    }
                }
            }
            dp[i] = list;
        }
        return dp[s.length()];
    }

    
    //暴力搜索划分结果O(2的n次方)
    public List<String> word_Break(String s, Set<String> wordDict, int start) {
        LinkedList<String> res = new LinkedList<>();
        if (start == s.length()) {
            res.add("");
        }
        for (int end = start + 1; end <= s.length(); end++) {
            if (wordDict.contains(s.substring(start, end))) {
                List<String> list = word_Break(s, wordDict, end);
                for (String l : list) {
                    res.add(s.substring(start, end) + (l.equals("") ? "" : " ") + l);
                }
            }
        }
        return res;
    }
    
    //上面dp和暴力求最终划分所有可能的结果可能会超时，下面这个不会超时，做一个预处理，
    //对于每一个作为单词结尾的下标i，标记出合理划分的单词的起始位置,然后在helper函数中深搜
    //预处理，时间复杂度(n的平方）
     List<String> result;
     public List<String> wordBreak2(String s, List<String> wordDict) {
         result=new ArrayList<String>();
         int n=s.length();
         List<Integer>[] pointer=new List[n];
         for(int i=0;i<n;i++){
             pointer[i]=new ArrayList<Integer>();
         }
         for(int i=0;i<n;i++){
             for(int j=0;j<=i;j++){
                 if(wordDict.contains(s.substring(j,i+1))&&(j==0||pointer[j-1].size()>0))
                     pointer[i].add(j);
             }
         }
         helper(pointer,s,n-1,"");
         return result;
     }
     public void helper(List<Integer>[] pointer,String s,int i,String pattern){
         if(i<0){
             result.add(pattern);
             return;
         }
         for(Integer item:pointer[i]){
             String nextPattern=pattern.length()==0?s.substring(item,i+1):s.substring(item,i+1)+" "+pattern;
             helper(pointer,s,item-1,nextPattern);
         }
     }
     
472.大神解法很厉害，学习一下

给定一个不含重复单词的列表，编写一个程序，返回给定单词列表中所有的连接词。
连接词的定义为：一个字符串完全是由至少两个给定数组中的单词组成的。
示例:
输入: ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]
输出: ["catsdogcats","dogcatsdog","ratcatdogcat"]
解释: "catsdogcats"由"cats", "dog" 和 "cats"组成; 
     "dogcatsdog"由"dog", "cats"和"dog"组成; 
     "ratcatdogcat"由"rat", "cat", "dog"和"cat"组成。


    //前缀树+dfs 解决值472
    public static List<String> findAllConcatenatedWordsInADict(String[] words) {
        TrieNode root = new TrieNode();
        for (String word : words) {
            //// 题目描述有问题, 应该补充上连接词至少由两个非空单词组成, 否则如果 words 包含空串,
            // 那么 words 中的其它所有字符串都是连接词. 这里加上特判就可以了.
            if (!word.equals("")) {
                root.add(word);
            }
        }
        List<String> res = new ArrayList<>();
        for (String word : words) {
            if (dfs(word.toCharArray(), 0, root)) {
                res.add(word);
            }

        }
        return res;

    }

    private static boolean dfs(char[] str, int start, TrieNode root) {
        int n = str.length;
        TrieNode node = root;
        for (int i = start; i < n; i++) {
            if (!node.next.containsKey(str[i])) {
                return false;
            }
            node = node.next.get(str[i]);
            // 短路运算: 如果找到了一个字符串则尝试从头开始走, 找下一个字符串
            if (node.isWord && dfs(str, i + 1, root)) {
                return true;
            }
        }
        // start != 0 含义即是不能匹配到自己，由至少两个给定数组中的单词组成的
        return node.isWord && start != 0;
    }

    static class TrieNode {
        public boolean isWord;
        public Map<Character, TrieNode> next;

        public TrieNode() {
            isWord = false;
            next = new HashMap<>();
        }

        public void add(String str) {
            TrieNode node = this;
            for (int i = 0; i < str.length(); i++) {
                char c = str.charAt(i);
                if (!node.next.containsKey(c)) {
                    node.next.put(c, new TrieNode());
                }
                node = node.next.get(c);
            }
            node.isWord = true;
        }

    }
