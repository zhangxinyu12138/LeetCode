移除无效的括号
第一种解法：时间复杂度 2的N次方，空间复杂度 N
class Solution {

  //最终无重复的结果集
  private Set<String> validExpressions = new HashSet<String>();
  private int minimumRemoved;

  private void reset() {
    this.validExpressions.clear();
    this.minimumRemoved = Integer.MAX_VALUE;
  }

  private void recurse(String s,int index,int leftCount,int rightCount,StringBuilder expression,int removedCount) {

    // If we have reached the end of string.
    if (index == s.length()) {

      // If the current expression is valid.
      if (leftCount == rightCount) {

        // If the current count of removed parentheses is <= the current minimum count
        if (removedCount <= this.minimumRemoved) {
          String possibleAnswer = expression.toString();

          // If the current count beats the overall minimum we have till now
          if (removedCount < this.minimumRemoved) {
            this.validExpressions.clear();
            this.minimumRemoved = removedCount;
          }
          this.validExpressions.add(possibleAnswer);
        }
      }
    } else {
      char currentCharacter = s.charAt(index);
      int length = expression.length();

      if (currentCharacter == '(' || currentCharacter == ')') {
         // Recursion where we delete the current character and move forward
        this.recurse(s, index + 1, leftCount, rightCount, expression, removedCount+1);
      }
      expression.append(currentCharacter);
      if (currentCharacter != '(' && currentCharacter != ')') {
       // If it's an parenthesis, consider it and recurse
        this.recurse(s, index + 1, leftCount, rightCount, expression, removedCount);
      }else if (currentCharacter == '(') {
          this.recurse(s, index + 1, leftCount + 1, rightCount, expression, removedCount);
      } else if (rightCount < leftCount) {
          // For a closing parenthesis, only recurse if right < left
          this.recurse(s, index + 1, leftCount, rightCount + 1, expression, removedCount);
      }

      // Undoing the append operation for other recursions.
      expression.deleteCharAt(length);
    }
  }

  public List<String> removeInvalidParentheses(String s) {
     this.reset();
     this.recurse(s, 0, 0, 0, new StringBuilder(), 0);
     return new ArrayList(this.validExpressions);
  }
}

第二种解法 预先计算出需要删除的左括号数和右括号数，在删除时，如果leftRem<0则不可删
 private void recurse(String s,int index,int leftCount,int rightCount,int leftRem,int rightRem,StringBuilder expression){
        if(index==s.length()){
            if(leftRem==0&&rightRem==0){
                this.validExpressions.add(expression.toString());
            }
        }else{
            char character=s.charAt(index);
            int length=expression.length();
            //discard current
            if((character=='('&&leftRem>0)||(character==')'&&rightRem>0)){
                this.recurse(s,index+1,leftCount,rightCount,leftRem-(character=='('?1:0),rightRem-(character==')'?1:0),expression);
            }
            expression.append(character);
            if(character!='('&&character!=')'){
                this.recurse(s,index+1,leftCount,rightCount,leftRem,rightRem,expression);
            }else if(character=='('){
                this.recurse(s,index+1,leftCount+1,rightCount,leftRem,rightRem,expression);
            }else if(rightCount<leftCount){
                this.recurse(s,index+1,leftCount,rightCount+1,leftRem,rightRem,expression);
            }
            expression.deleteCharAt(length);
        }
    }
    public List<String> removeInvalidParentheses(String s) {
       int left=0,right=0;
       for(int i=0;i<s.length();i++){
           if(s.charAt(i)=='('){
               left++;
           }else if(s.charAt(i)==')'){
               right= left==0?right+1:right;
               left= left>0?left-1:left;
           }
       }
       this.recurse(s,0,0,0,left,right,new StringBuilder());
       return new ArrayList<String>(this.validExpressions);
    }


