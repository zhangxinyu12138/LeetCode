1. leetcode 448 Find All Numbers Disappeared in an Array
Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
Find all the elements of [1, n] inclusive that do not appear in this array. with O(1) space and in O(n) runtime.
Example:
Input:
[4,3,2,7,8,2,3,1]
Output:
[5,6]

将元素以其为下标获取数组中的值，如果对应元素大于0，则取反，这样没有出现过的元素为下标的元素依然为正。
class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> res=new ArrayList<>();
        for(int i=0;i<nums.length;i++){
            int value=Math.abs(nums[i])-1;
            if(nums[value]>0){
                nums[value]=-nums[value];
            }
        }
        for(int i=0;i<nums.length;i++){
            if(nums[i]>0){
                res.add(i+1);
            }
        }
        return res;
    }
}

2.leetcode 41 First Missing Positive
Given an unsorted integer array, find the smallest missing positive integer.
Example 1:
Input: [1,2,0]
Output: 3
Example 2:

Input: [3,4,-1,1]
Output: 2
Example 3:

Input: [7,8,9,11,12]
Output: 1
因为题目规定不能开辟额外的空间，所以，考虑到遍历数组，n为数组长度。如果nums[i]大于零且数字在n以内，且没有在应该的位置，将其放到其规定的位置，
有点像分好了n个桶，将该位置的数字放到其应该在的桶。然后再遍历一次数组，看看第一个不符合的桶，返回。如果所有的n个数都在其正确的位置，
那么第一个缺失的数就是n+1。

class Solution {
    public int firstMissingPositive(int[] nums) {
        int len=nums.length;
        for(int i=0;i<len;i++){
            if(nums[i]<=len&&nums[i]>=1&&nums[i]!=nums[nums[i]-1]){
                swap(nums,nums[i]-1,i);
                i--;
            }
        }
        for(int i=0;i<len;i++){
            if(nums[i]!=i+1) return i+1;
        }
        return len+1;
    }
    public void swap(int[] nums,int i,int j){
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
}
3.leetcode 442. Find All Duplicates in an Array
与448非常相似。思路是把数组中的数值当做下标进行处理。
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> res=new ArrayList<>();
        for(int i=0;i<nums.length;i++){
            int curIndex=Math.abs(nums[i])-1;
            if(nums[curIndex]>0){
                nums[curIndex]=-nums[curIndex];
            }else{
                res.add(curIndex+1);
            }
        }
        return res;
    }
}


