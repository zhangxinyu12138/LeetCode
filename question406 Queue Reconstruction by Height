Input:
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]

Output:
[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]

自己的思路是按照身高升序排序，把身高相同的人按照k进行升序排序。然后按身高由小到大按照k进行插入，但是这样移动前面身高低的人会改变后面数字的下标，
所以每次先对身高最高的操作。参考他人做法：

分析：给出了一些人的身高和这个人前面身高大于等于他的人数，对这些人进行排队，使得所有人的情况都得到满足。思路是(贪心算法)：

　　(1)首先找到身高最高的人并对他们进行排序。

　　(2)然后找到身高次高的人，按照他们的前面的人数把他们插入到最高的人群中。

因此这是一个排序和插入的过程，按照身高进行降序排序，然后把身高相同的人按照k进行升序排序。每次取出身高相同的一组人，按照k值把他们插入到队列中。

class Solution {
    public int[][] reconstructQueue(int[][] people) {
        Arrays.sort(people,new Comparator<int[]>(){
            public int compare(int[] a,int[] b){
                if(a[0]!=b[0]) return b[0]-a[0];
                else return a[1]-b[1];
            }
        });
        List<int[]> res=new LinkedList<>();
        for(int i=0;i<people.length;i++){
            int[] temp=people[i];
            res.add(temp[1],temp);
        }
        return res.toArray(new int[people.length][]);
    }
}
