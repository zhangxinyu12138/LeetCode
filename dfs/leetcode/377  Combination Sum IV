  1.377: Given an integer array with all positive numbers and no duplicates, 
  find the number of possible combinations that add up to a positive integer target.
  nums = [1, 2, 3]
  target = 4

The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)

Note that different sequences are counted as different combinations.

Therefore the output is 7.



  public int combinationSum4(int[] nums, int target) {
        if(nums==null||nums.length==0||target<=0)
            return 0;
        int[] dp=new int[target+1];
        dp[0]=1;
        for(int i=1;i<=target;i++){
            for(int j=0;j<nums.length;j++){
                if(i>=nums[j]) dp[i]+=dp[i-nums[j]];
            }
        }
        return dp[target];
    }
    
以下2，3，4均不允许有重复的解  The solution set must not contain duplicate combinations.

  2.39:  Given a set of candidate numbers (candidates) (without duplicates) and a target number (target),
  find all unique combinations in candidates where the candidate numbers sums to target.
  The same repeated number may be chosen from candidates unlimited number of times.
   Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
多重背包问题。
   
   public List<List<Integer>> combinationSum(int[] candidates, int target) {
        int len=candidates.length;
        List<List<Integer>> res=new ArrayList<>();
        List<Integer> list=new ArrayList<>();
        if(len==0) return res;
        Arrays.sort(candidates);
        combinationSumHelp(res,list,candidates,target,0);
        return res;
    }
    private boolean combinationSumHelp(List<List<Integer>> res,List<Integer> list,int[] candidates,int target,int start){
        if(target<0) return false;
        else if(target==0){
            res.add(new ArrayList<>(list));
            return false;
        }else{
            for(int i=start;i<candidates.length;i++){
                list.add(candidates[i]);
                boolean flag=combinationSumHelp(res,list,candidates,target-candidates[i],i);
                list.remove(list.size()-1);
                if(!flag) break;
            }
        }
        return true;
    }
    
   3. 40: Given a collection of candidate numbers (candidates) and a target number (target), 
   find all unique combinations in candidates where the candidate numbers sums to target.
   Each number in candidates may only be used once in the combination.

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res=new ArrayList<>();
        if(candidates==null||candidates.length==0||target<0){
            return res;
        }
        List<Integer> list=new ArrayList<>();
        Arrays.sort(candidates);
        get(candidates,target,0,list,res);
        return res;
    }
    private boolean get(int[] candidates,int target,int start,List<Integer> list,List<List<Integer>> res){
        if(target<0) return false;
        if(target==0){
            res.add(new ArrayList<>(list));
            return false;
        }
        for(int i=start;i<candidates.length;i++){
            list.add(candidates[i]);
            //只有这里不同，数组中的每个数只能用一次，0/1背包，start需要从下一个数开始
            boolean flag=get(candidates,target-candidates[i],i+1,list,res);
            list.remove(list.size()-1);
            //增加了这句话，因为这次数组中有重复的数字，但是结果中不能出现相同的组合，所以每当list为空时下一个i要从不相等的数字开始
            while(i<candidates.length-1&&candidates[i]==candidates[i+1]) i++;
            //若结果和大于target或者刚刚求得一个满足的结果，删除最后一个数之后，后面的数都要比最后一个数大，所以直接跳出循环
            if(!flag) break;
        }
        //跳出循环后返回true,回到递归栈的上一层。又删除了一个数，数组继续往下面遍历，查看和与target的关系
        return true;
    }
    
  216. Combination Sum III
  Find all possible combinations of k numbers that add up to a number n, 
  given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.
  
  Input: k = 3, n = 9
  Output: [[1,2,6], [1,3,5], [2,3,4]]
  固定了数的总个数

  private List<List<Integer>> result;
     public List<List<Integer>> combinationSum3(int k, int n) {
        result = new ArrayList<List<Integer>>();
        List<Integer> temp = new ArrayList<Integer>();
        dfs(temp, k, n, 0,1);
        return result;
    }
    public void dfs(List<Integer> temp, int k, int n, int sum, int start) {
        if (temp.size() == k) return;

        for (int i = start; i <= 9; i++) {
            if (i >= n) return;

            if (sum + i < n && temp.size() < k) {
                temp.add(i);
                dfs(temp, k, n, sum + i, i + 1);
                temp.remove(temp.size() - 1);
            } else if (sum + i == n && temp.size() == k - 1) {
                temp.add(i);
                result.add(new ArrayList<>(temp));
                temp.remove(temp.size() - 1);
                return;
            }

        }
    }
